// ===== ADMIN ABUSE SYSTEM =====
let abuseTimer = null;
let eventTimer = null;
let abuseTimeLeft = 600; // 10 minutes
let nextEventIn = 120; // 2 minutes
let currentEvent = null;
let isAbuseActive = false;

const abuseEvents = [
  {
    id: 'disco',
    name: 'üíÉ –î–ò–°–ö–û-–†–ï–ñ–ò–ú! üï∫',
    description: '–°–∞–π—Ç –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ –¥–∏—Å–∫–æ—Ç–µ–∫—É! –¶–≤–µ—Ç–∞ –º–µ–Ω—è—é—Ç—Å—è –∫–∞–∫ —Å—É–º–∞—Å—à–µ–¥—à–∏–µ!',
    execute: startDiscoMode,
    duration: 30000,
    end: endDiscoMode
  },
  {
    id: 'diamonds5',
    name: 'üíé –ê–õ–ú–ê–ó–ù–´–ô –î–û–ñ–î–¨!',
    description: '–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ +5 –∞–ª–º–∞–∑–æ–≤! –ë–æ–Ω—É—Å –∑–∞ –≤—ã–∂–∏–≤–∞–Ω–∏–µ!',
    execute: giveDiamonds5,
    duration: 5000
  },
  {
    id: 'glitch',
    name: 'üîÑ –ì–õ–ò–ß-–ê–¢–ê–ö–ê!',
    description: '–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–ª—é—á–∏—Ç! –ù–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é!',
    execute: startGlitchMode,
    duration: 25000,
    end: endGlitchMode
  },
  {
    id: 'diamonds3', 
    name: '‚ú® –ë–û–ù–£–°–ù–´–ï –ê–õ–ú–ê–ó–´!',
    description: '–ï—â–µ +3 –∞–ª–º–∞–∑–∞ –≤ –≤–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é!',
    execute: giveDiamonds3,
    duration: 5000
  },
  {
    id: 'shake',
    name: 'üå™Ô∏è –ó–ï–ú–õ–ï–¢–†–Ø–°–ï–ù–ò–ï!',
    description: '–°–∞–π—Ç —Ç—Ä—è—Å–µ—Ç—Å—è! –î–µ—Ä–∂–∏—Ç–µ—Å—å –∫—Ä–µ–ø—á–µ!',
    execute: startShakeMode,
    duration: 20000,
    end: endShakeMode
  },
  {
    id: 'everything',
    name: 'üí• –í–°–Å –°–†–ê–ó–£! –ê–ü–û–ö–ê–õ–ò–ü–°–ò–°!',
    description: '–í–°–ï –ò–í–ï–ù–¢–´ –û–î–ù–û–í–†–ï–ú–ï–ù–ù–û! –í–´–ñ–ò–í–ò–¢–ï –õ–ò –í–´?!',
    execute: startEverythingEvent,
    duration: 40000,
    end: endEverythingEvent
  }
];

// ===== DIAMONDS SYSTEM =====
function getDiamonds() {
  return Number(localStorage.getItem('akkro_diamonds') || 0);
}

function setDiamonds(val) {
  localStorage.setItem('akkro_diamonds', String(val));
  updateDiamondDisplay();
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
  localStorage.setItem('akkro_last_update', new Date().toISOString());
}

function updateDiamondDisplay() {
  const diamonds = getDiamonds();
  document.getElementById('diamond-counter').textContent = `üíé ${diamonds}`;
}

function addDiamonds(amount) {
  const current = getDiamonds();
  const newAmount = current + amount;
  setDiamonds(newAmount);
  return newAmount;
}

// ===== GAMES SYSTEM =====
const games = [
  { 
    title: "Space Runner", 
    path: "#", 
    version: "v1.2.5",
    description: "Run across space platforms and collect stars in this exciting arcade",
    icon: "üöÄ",
    available: true
  },
  { 
    title: "Cube Adventure", 
    path: "#", 
    version: "v2.0.1",
    description: "Solve puzzles and explore the mysterious cubic world",
    icon: "üéÆ",
    available: true
  },
  { 
    title: "Puzzle Master", 
    path: "#", 
    version: "v1.8.3",
    description: "Test your puzzle-solving skills in a space setting",
    icon: "üß©",
    available: true
  }
];

function renderGames() {
  const gamesList = document.getElementById('games-list');
  gamesList.innerHTML = games.map(game => `
    <div class="game-card">
      <div class="game-icon">${game.icon}</div>
      <div class="game-title">${game.title}</div>
      <div class="game-description">${game.description}</div>
      <div class="game-meta">
        <div class="game-version">${game.version}</div>
      </div>
      <button class="play-btn" onclick="playGame('${game.title}')">Play Now</button>
    </div>
  `).join('');
}

function playGame(gameName) {
  showNotification(`üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã: ${gameName}`, 'info');
}

// ===== EVENT FUNCTIONS =====
function startDiscoMode() {
  document.body.classList.add('disco-mode');
  showNotification('üíÉ –î–ò–°–ö–û-–†–ï–ñ–ò–ú –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! üï∫', 'disco');
}

function endDiscoMode() {
  document.body.classList.remove('disco-mode');
}

function startGlitchMode() {
  document.body.classList.add('glitch-mode');
  showNotification('üîÑ –ì–õ–ò–ß-–ê–¢–ê–ö–ê –ù–ê–ß–ê–õ–ê–°–¨!', 'glitch');
}

function endGlitchMode() {
  document.body.classList.remove('glitch-mode');
}

function startShakeMode() {
  document.body.classList.add('shake-mode');
  showNotification('üå™Ô∏è –°–ê–ô–¢ –¢–†–Ø–°–ï–¢–°–Ø! –î–ï–†–ñ–ò–¢–ï–°–¨!', 'shake');
}

function endShakeMode() {
  document.body.classList.remove('shake-mode');
}

function giveDiamonds5() {
  const newBalance = addDiamonds(5);
  showNotification(`üéâ +5 –ê–õ–ú–ê–ó–û–í! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: ${newBalance} üíé`, 'diamonds');
}

function giveDiamonds3() {
  const newBalance = addDiamonds(3);
  showNotification(`‚ú® +3 –ê–õ–ú–ê–ó–ê! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: ${newBalance} üíé`, 'diamonds');
}

function startEverythingEvent() {
  document.body.classList.add('disco-mode', 'glitch-mode', 'shake-mode');
  const newBalance = addDiamonds(8); // 5 + 3
  showNotification(`üí• –ê–ü–û–ö–ê–õ–ò–ü–°–ò–°! +8 –ê–õ–ú–ê–ó–û–í! –ë–∞–ª–∞–Ω—Å: ${newBalance} üíé`, 'apocalypse');
}

function endEverythingEvent() {
  document.body.classList.remove('disco-mode', 'glitch-mode', 'shake-mode');
}

// ===== NOTIFICATION SYSTEM =====
function showEventNotification(message) {
  const notification = document.getElementById('event-notification');
  notification.textContent = message;
  notification.style.display = 'block';
  
  setTimeout(() => {
    notification.style.display = 'none';
  }, 4000);
}

function showNotification(message, type = 'info') {
  const notification = document.getElementById('global-notification');
  notification.textContent = message;
  notification.style.display = 'block';
  
  // Different colors for different event types
  if (type === 'disco') {
    notification.style.background = 'linear-gradient(45deg, #ff00ff, #00ffff)';
  } else if (type === 'glitch') {
    notification.style.background = 'linear-gradient(45deg, #00ff00, #0000ff)';
  } else if (type === 'shake') {
    notification.style.background = 'linear-gradient(45deg, #ff9900, #ff0000)';
  } else if (type === 'diamonds') {
    notification.style.background = 'linear-gradient(45deg, #22f2ff, #228b22)';
  } else if (type === 'apocalypse') {
    notification.style.background = 'linear-gradient(45deg, #ff0000, #000000)';
  } else {
    notification.style.background = 'linear-gradient(45deg, #8bb6f9, #b6bcfa)';
  }
  
  setTimeout(() => {
    notification.style.display = 'none';
  }, 3000);
}

// ===== ABUSE SYSTEM =====
function startAdminAbuse() {
  if (isAbuseActive) return;
  
  isAbuseActive = true;
  
  // Show the abuse timer
  const abuseTimerElement = document.getElementById('abuse-timer');
  abuseTimerElement.style.display = 'block';
  
  // Show big notification
  showEventNotification('üö® –ê–î–ú–ò–ù-–ê–ë–¨–Æ–ó –ê–ö–¢–ò–í–ò–†–û–í–ê–ù! üö®\n10 –º–∏–Ω—É—Ç –¥–æ –∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞!');
  
  // Start main timer
  abuseTimer = setInterval(() => {
    abuseTimeLeft--;
    updateTimerDisplay();
    
    // Update next event counter
    nextEventIn--;
    if (nextEventIn <= 0) {
      triggerRandomEvent();
      nextEventIn = 120; // Reset to 2 minutes
    }
    
    // Update next event display
    document.getElementById('next-event').textContent = 
      `–°–ª–µ–¥—É—é—â–∏–π –∏–≤–µ–Ω—Ç —á–µ—Ä–µ–∑: ${Math.floor(nextEventIn/60)}:${(nextEventIn%60).toString().padStart(2, '0')}`;
    
    // End abuse when time is up
    if (abuseTimeLeft <= 0) {
      endAdminAbuse();
    }
  }, 1000);
  
  // Trigger first event immediately
  setTimeout(() => {
    triggerRandomEvent();
  }, 5000);
}

function updateTimerDisplay() {
  const minutes = Math.floor(abuseTimeLeft / 60);
  const seconds = abuseTimeLeft % 60;
  document.getElementById('timer-time').textContent = 
    `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
}

function triggerRandomEvent() {
  const availableEvents = abuseEvents.filter(event => event.id !== currentEvent?.id);
  const randomEvent = availableEvents[Math.floor(Math.random() * availableEvents.length)];
  
  currentEvent = randomEvent;
  
  // Show event notification
  showEventNotification(randomEvent.description);
  
  // Execute the event
  randomEvent.execute();
  
  // End event after duration
  setTimeout(() => {
    if (randomEvent.end) {
      randomEvent.end();
    }
    currentEvent = null;
    showNotification(`–ò–≤–µ–Ω—Ç "${randomEvent.name}" –∑–∞–≤–µ—Ä—à–µ–Ω!`);
  }, randomEvent.duration);
}

function endAdminAbuse() {
  clearInterval(abuseTimer);
  if (eventTimer) clearInterval(eventTimer);
  isAbuseActive = false;
  
  // Reset all effects
  document.body.classList.remove('disco-mode', 'glitch-mode', 'shake-mode');
  
  // Show final message
  showEventNotification('‚è∞ –í–†–ï–ú–Ø –í–´–®–õ–û! \n–í–´ –ë–£–î–ï–¢–ï –í–´–ö–ò–ù–£–¢–´ –ß–ï–†–ï–ó 5 –°–ï–ö–£–ù–î!');
  
  // Hide timer
  setTimeout(() => {
    document.getElementById('abuse-timer').style.display = 'none';
  }, 2000);
  
  // Kick player after 5 seconds
  setTimeout(() => {
    kickPlayer();
  }, 5000);
}

function kickPlayer() {
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –∫–∏–∫–æ–º
  const finalBalance = getDiamonds();
  localStorage.setItem('akkro_final_balance', finalBalance);
  
  document.body.innerHTML = `
    <div style="
      background: linear-gradient(135deg, #1c1c2d 70%, #4c4c65 100%);
      color: #fff;
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      flex-direction: column;
      text-align: center;
      padding: 2rem;
      font-family: 'Segoe UI', Arial, sans-serif;
    ">
      <div style="font-size: 5em; margin-bottom: 0.5em;">üö™</div>
      <div style="font-size: 4em; font-weight: bold; color: #ff4747; margin-bottom: 0.2em; text-shadow: 0 0 18px #fff7;">
        –í–†–ï–ú–Ø –í–´–®–õ–û!
      </div>
      <div style="font-size: 1.5em; color: #22f2ff; margin-bottom: 1em; text-shadow: 0 0 10px #22f2ff;">
        –í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalBalance} üíé
      </div>
      <div style="font-size: 1.22em; color: #fff; margin-bottom: 1.2em; max-width: 600px; line-height: 1.6;">
        –í—ã –±—ã–ª–∏ –≤—ã–∫–∏–Ω—É—Ç—ã —Å —Å–∞–π—Ç–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –∞–¥–º–∏–Ω-–∞–±—å—é–∑–∞.<br>
        –í–∞—à–∏ –∞–ª–º–∞–∑—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...
      </div>
      <button onclick="window.location.reload()" style="
        background: linear-gradient(45deg, #8bb6f9, #b6bcfa);
        color: white;
        padding: 1rem 2rem;
        border: none;
        border-radius: 2em;
        font-size: 1.1rem;
        font-weight: 700;
        cursor: pointer;
      ">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–π—á–∞—Å</button>
    </div>
  `;
  
  setTimeout(() => {
    window.location.reload();
  }, 5000);
}

// ===== INITIALIZATION =====
function initializeSite() {
  renderGames();
  updateDiamondDisplay();
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  const currentBalance = getDiamonds();
  showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –±–∞–ª–∞–Ω—Å: ${currentBalance} üíé`, 'info');
  
  // Start admin abuse after 3 seconds
  setTimeout(() => {
    startAdminAbuse();
  }, 3000);
}

// Initialize when page loads
window.addEventListener('load', () => {
  const loader = document.getElementById('loader-bg');
  const loadingText = document.getElementById('loading-text');
  
  const steps = [
    "–ó–∞–≥—Ä—É–∑–∫–∞ –ª—É–Ω–Ω–æ–≥–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è...",
    "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä...",
    "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...",
    "–ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∞–ª–º–∞–∑–æ–≤...",
    "–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ...",
    "–ê–ö–¢–ò–í–ê–¶–ò–Ø –ê–î–ú–ò–ù-–ê–ë–¨–Æ–ó–ê! üö®"
  ];
  
  let currentStep = 0;
  const interval = setInterval(() => {
    if (currentStep < steps.length) {
      loadingText.textContent = steps[currentStep];
      currentStep++;
    } else {
      clearInterval(interval);
      setTimeout(() => {
        loader.classList.add('loaded');
        initializeSite();
      }, 1000);
    }
  }, 600);
});

// Achievement button
document.getElementById('achieve-btn').addEventListener('click', () => {
  const currentBalance = getDiamonds();
  showNotification(`üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} üíé`, 'info');
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.addEventListener('DOMContentLoaded', () => {
  const savedBalance = localStorage.getItem('akkro_diamonds');
  const lastUpdate = localStorage.getItem('akkro_last_update');
  
  if (savedBalance) {
    console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω –±–∞–ª–∞–Ω—Å: ${savedBalance} –∞–ª–º–∞–∑–æ–≤`);
    if (lastUpdate) {
      console.log(`–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${new Date(lastUpdate).toLocaleString()}`);
    }
  }
});
